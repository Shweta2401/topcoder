// BEGIN CUT HERE
/*
// PROBLEM STATEMENT
// John and Brus are studying string theory at the university.  According to Brus, a string is called lucky if no two consecutive characters are equal.  John is analyzing a string s, and he wants to know how many distinct lucky strings can be generated by reordering the letters in s.  If s is a lucky string in its original ordering, it should also be considered in the count.

DEFINITION
Class:TheLuckyString
Method:count
Parameters:string
Returns:int
Method signature:int count(string s)


CONSTRAINTS
-s will contain between 1 and 10 characters, inclusive.
-Each character of s will be a lowercase letter ('a' - 'z').


EXAMPLES

0)
"ab"

Returns: 2

Two lucky strings - "ab" and "ba".

1)
"aaab"

Returns: 0

It's impossible to construct a lucky string.

2)
"aabbbaa"

Returns: 1

"abababa" is the only lucky string that can be generated.

3)
"abcdefghij"

Returns: 3628800

*/
// END CUT HERE

#line 51 "TheLuckyString.cpp"
#include <string>
#include <vector>
#include <set>
#include <map>
#include <list>
#include <queue>
#include <algorithm>
// BEGIN CUT HERE
#include <iostream>
#include "cout.h"
#include <time.h>
// END CUT HERE
#include <sstream>
#include <cmath>
using namespace std;

#define sz(a)  int((a).size())
#define pb  push_back
#define all(c)  (c).begin(),(c).end()
#define tr(c,i)  for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)

// BEGIN CUT HERE
int C(int n, int r)
{
  if (n == 0 || r == 0 || r == n) return 1;
  if (r > n-r) r = n-r;
  return n * C(n-1,r-1) / r;
}
// END CUT HERE
int F(int n)
{
  int f = 1;
  for (int i=n;i>1;i--) f *= i;
  return f;
}

class TheLuckyString {
public:
  int count(string s) {
	int n = s.size();
	vector<vector<int> > t(n);
	for(int st=0;st<n;st++) {
	  t[st].resize(1024*n);
	  for (int i=1024*n-1;i>=0;i--) t[st][i] = 0;
	}
	for (int la=0;la<n;la++) {
	  t[0][la*1024 + (1 << la)] = 1;
	}
// BEGIN CUT HERE
//	cout << s << endl;
//	cout << n << endl;
	//	cout << t[0] << endl;
// END CUT HERE

	vector<int> cz(26,0);
	int kk = 1;
	for (int i=0;i<n;i++) cz[s[i]-'a']++;
	for (int i=0;i<26;i++) if (cz[i] > 1) kk *= F(cz[i]);
	
	for (int st=0;st<n-1;st++) {
	  for (int la=0;la<n;la++) {
		for (int m=0;m<1024;m++) {
		  int c = t[st][la*1024 + m];
		  if (c > 0) {
			for (int nx=0;nx<n;nx++) {
			  if (nx==la) continue;
			  if (m & (1 << nx)) continue;
			  if (s[nx] == s[la]) continue;
			  //printf("stage%d, la=%d(%c),mask=%d,nx=%d(%c) \n", st,la,s[la],m,nx,s[nx]);
			  t[st+1][nx*1024 + (m + (1 << nx))] += c;
			}
		  }
		}
	  }
	}
	int c = 0;
	int f = (1 << n) - 1;
	for (int i=0;i<n;i++) {
	  for (int m=0;m<1024;m++) {
		//printf("  i=%d m=%d,c=%d\n", i,m,t[n-1][i*1024+f]);
	  }
	  c += t[n-1][i*1024 + f];
	  //if (t[n-1][i*1024 + f]) c++;
	}

	return c / kk;
  }
// BEGIN CUT HERE
  clock_t start;
  void timer_clear()
  {
	start = clock();
  }
  char *timer()
  {
	clock_t end = clock();
	double interval = (double)(end - start)/CLOCKS_PER_SEC;
	
	char *ret = NULL;
	asprintf(&ret, " (%g msec)", interval*1000);
	return ret;
  }
// END CUT HERE
	
// BEGIN CUT HERE
	public:
	void run_test(int Case) { if ((Case == -1) || (Case == 0)) test_case_0(); if ((Case == -1) || (Case == 1)) test_case_1(); if ((Case == -1) || (Case == 2)) test_case_2(); if ((Case == -1) || (Case == 3)) test_case_3(); }
	private:
	template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
	void verify_case(int Case, const int &Expected, const int &Received) { cerr << "Test Case #" << Case << "..."; if (Expected == Received) cerr << "PASSED" << endl; else { cerr << "FAILED" << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } }
	void test_case_0() { string Arg0 = "ab"; int Arg1 = 2; verify_case(0, Arg1, count(Arg0)); }
	void test_case_1() { string Arg0 = "aaab"; int Arg1 = 0; verify_case(1, Arg1, count(Arg0)); }
	void test_case_2() { string Arg0 = "aabbbaa"; int Arg1 = 1; verify_case(2, Arg1, count(Arg0)); }
	void test_case_3() { string Arg0 = "abcdefghij"; int Arg1 = 3628800; verify_case(3, Arg1, count(Arg0)); }

// END CUT HERE

};

// BEGIN CUT HERE
int main(int argc, char *argv[]) {
	TheLuckyString ___test;
	___test.run_test( argc>=2 ? atoi(argv[1]):-1 );
}
// END CUT HERE
