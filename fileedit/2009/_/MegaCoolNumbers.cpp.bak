// BEGIN CUT HERE
/*
// PROBLEM STATEMENT
// A positive integer is called a cool number of power A if it can be separated into exactly A groups of consecutive digits, where the digits in each group form an arithmetic progression.  An arithmetic progression is a sequence of numbers in which the difference between any two consecutive numbers is the same.  A positive integer is called a mega cool number of power A if it is a cool number of power A, not a cool number of power A-1, and all its digits are in non-decreasing order.

Determine the number of mega cool numbers of power A that contain exactly N digits (with no leading zeroes).  Return this number modulo 1,000,000,007.

DEFINITION
Class:MegaCoolNumbers
Method:count
Parameters:int, int
Returns:int
Method signature:int count(int N, int A)


CONSTRAINTS
-A and N will be between 1 and 1,000, inclusive. 


EXAMPLES

0)
1
1

Returns: 9

There 9 such numbers: 1, 2, 3, 4, 5, 6, 7, 8, 9.

1)
2
1

Returns: 45

Any two-digit number with non-decreasing digits will be a mega cool number of power 1.

2)
2
2

Returns: 0

There are no such numbers.

3)
10
3

Returns: 7502



*/
// END CUT HERE

#line 58 "MegaCoolNumbers.cpp"
#include <string>
#include <vector>
#include <set>
#include <map>
#include <list>
#include <queue>
#include <algorithm>
// BEGIN CUT HERE
#include <iostream>
#include "cout.h"
// END CUT HERE
#include <sstream>
#include <cmath>
using namespace std;

#define sz(a)  int((a).size())
#define pb  push_back
#define all(c)  (c).begin(),(c).end()
#define tr(c,i)  for(typeof((c).begin()) i=(c).begin(); i!=(c).end(); i++)
#define rep(var,n)  for(int var=0;var<(n);var++)

const long long H=1000000007LL;

class MegaCoolNumbers {
  vector<long long> m;
  long long sub(int N, int A, int e, bool T) {
	//printf("sub(N:%d,A:%d,e:%d)\n",N,A,e);
	//if(e==0) return 0LL;
	if(N<A) return 0LL;
	if(A==0) return 0LL;
	if(N==1) return (e==0||T==0)?0LL:1LL;
	if(N==A) return 0LL;
	int k=N*10010+A*10+e+(T?10020010:0);
	if (m[k]>=0) return m[k];
	long long sum=0LL;
	::printf("sub(N:%d,A:%d,e:%d)\n",N,A,e);
	//int a_=A-1;
	if (A==1) {
	  //1..e//
	  if (T) sum++;
	  else {
		for(int i=1;i<=e;i++){
		  int d=e-i;
		  //printf("      <A=1> N:%d,i:%d,d:%d\n", N,i,d);
		  if(d>0 && d%(N-1)==0) sum++;
		}
		sum %= H;
	  }
	} else {
	  for(int n_=1;n_<=N-1;n_++){
		int ke=N-n_;
		::printf("  n_:%d(in 1..%d),ke=%d\n", n_,N-1,ke);
		for(int le=1;le<=e;le++) {
		  //rep(le,10) {
		  long long s0 = sub(n_,A-1,le,false), s1 = sub(n_,A-1,le,true);
		  //printf("    [..le:%d][i..e:%d] sub(%d,%d,%d)=%lld\n", le,e, n_,A-1,le, s);
		  if (ke==1){
			sum += T ? s1 : s0;
		  } else {
			if(T){ // le<e,
			  if(le<e) sum+=s1+s0;
			}else{ //
			  for(int i=le;i<e;i++) {
				int d=e-i;
				if (d>0) {
				  long long s_ = s0;
				  if(i>le) s_ += s1;
				  if(d%(ke-1)==0) {
					sum += s_ * (d/(ke-1));
				  }
				}
			  }
			}
		  }
		  sum%=H;
		}
	  }
	}
	m[k]=sum;
	printf(" => %lld\n", sum);
	return sum;
  }
public:
  int count(int N, int A) {
	m.resize(20040020); fill(all(m),-1);
	long long sum = 0LL;
	for(int e=1;e<=9;e++) sum += sub(N,A,e,false) + sub(N,A,e,true);
	return (int)(sum % 1000000007);
  }
};

// BEGIN CUT HERE
#include <time.h>
clock_t start_time;
void timer_clear() { start_time = clock(); }
string timer() { clock_t end_time = clock(); double interval = (double)(end_time - start_time)/CLOCKS_PER_SEC; ostringstream os; os << " (" << interval*1000 << " msec)"; return os.str(); }

template <typename T> string print_array(const vector<T> &V) { ostringstream os; os << "{ "; for (typename vector<T>::const_iterator iter = V.begin(); iter != V.end(); ++iter) os << '\"' << *iter << "\","; os << " }"; return os.str(); }
int verify_case(const int &Expected, const int &Received) { if (Expected == Received) cerr << "PASSED" << timer() << endl; else { cerr << "FAILED" << timer() << endl; cerr << "\tExpected: \"" << Expected << '\"' << endl; cerr << "\tReceived: \"" << Received << '\"' << endl; } return 0;}

template<int N> struct Case_ {};
char Test_(...);
int Test_(Case_<0>) {
	timer_clear();
	int N = 1; 
	int A = 1; 
	int RetVal = 9; 
	return verify_case(RetVal, MegaCoolNumbers().count(N, A)); }
int Test_(Case_<1>) {
	timer_clear();
	int N = 2; 
	int A = 1; 
	int RetVal = 45; 
	return verify_case(RetVal, MegaCoolNumbers().count(N, A)); }
int Test_(Case_<2>) {
	timer_clear();
	int N = 2; 
	int A = 2; 
	int RetVal = 0; 
	return verify_case(RetVal, MegaCoolNumbers().count(N, A)); }
int Test_(Case_<3>) {
	timer_clear();
	int N = 10; 
	int A = 3; 
	int RetVal = 7502; 
	return verify_case(RetVal, MegaCoolNumbers().count(N, A)); }

template<int N> void Run_() { cerr << "Test Case #" << N << "..." << flush; Test_(Case_<N>()); Run_<sizeof(Test_(Case_<N+1>()))==1 ? -1 : N+1>(); }
template<>      void Run_<-1>() {}
int main(int argc, char *argv[])
{
  int n = (argc == 2)? atoi(argv[1]) : -1;
  if (n >= 0) {
	cerr << "Test Case #" << n << "..." << flush;
	switch (n) {
	case 0:	Test_(Case_<0>()); break;
	case 1:	Test_(Case_<1>()); break;
	case 2:	Test_(Case_<2>()); break;
	case 3:	Test_(Case_<3>()); break;
	  /*
	case 4:	Test_(Case_<4>()); break;
	case 5:	Test_(Case_<5>()); break;
	case 6:	Test_(Case_<6>()); break;
	case 7:	Test_(Case_<7>()); break;
	case 8:	Test_(Case_<8>()); break;
	case 9:	Test_(Case_<9>()); break;
	case 10:	Test_(Case_<10>()); break;
	  */
	default: Run_<0>(); break;
	}
  } else {
	Run_<0>();
  }
}
//int main() { Run_<0>(); }
// END CUT HERE

